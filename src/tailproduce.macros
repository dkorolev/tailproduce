// TailProduce static framework macros.
// Static framework is the one that lists all the streams in the source file,
// thus allowing all C++ template and static typing powers to come into play.
#define TAILPRODUCE_STATIC_FRAMEWORK_BEGIN(NAME, BASE) \
    class NAME : public ::TailProduce::StaticFramework<BASE> { \
      public: \
        typedef NAME T_THIS_FRAMEWORK_INSTANCE; \
        typedef ::TailProduce::StaticFramework<BASE> T_FRAMEWORK; \
        typedef typename T_FRAMEWORK::T_STORAGE T_STORAGE; \
        NAME(T_STORAGE& storage, \
             const ::TailProduce::StreamManagerParams& params = ::TailProduce::StreamManagerParams::FromCommandLineFlags()) \
          : T_FRAMEWORK(storage, params) {} \

#define TAILPRODUCE_STREAM(NAME, ENTRY_TYPE, ORDER_KEY_TYPE) \
        struct NAME##_type { \
            typedef ENTRY_TYPE T_ENTRY; \
            typedef ORDER_KEY_TYPE T_ORDER_KEY; \
            typedef ::TailProduce::StreamInstance<T_ENTRY, T_ORDER_KEY> stream_type; \
            typedef ::TailProduce::INTERNAL_UnsafeListener<NAME##_type> INTERNAL_unsafe_listener_type; \
            typedef ::TailProduce::INTERNAL_UnsafePublisher<NAME##_type> INTERNAL_unsafe_publisher_type; \
            typedef ::TailProduce::Publisher<NAME##_type> publisher_type; \
            typedef std::pair<T_ORDER_KEY, uint32_t> head_pair_type; \
            typedef ::TailProduce::StorageKeyBuilder<NAME##_type> key_builder_type; \
            T_THIS_FRAMEWORK_INSTANCE* manager; \
            stream_type stream; \
            const std::string name; \
            key_builder_type key_builder; \
            head_pair_type head; \
            ::TailProduce::ConfigValues cv = ::TailProduce::ConfigValues("S", "D", "Register", "LastWrite", ':'); \
            mutable ::TailProduce::SubscriptionsManager subscriptions; \
            NAME##_type( \
                T_THIS_FRAMEWORK_INSTANCE* manager, \
                const char* stream_name, \
                const char* entry_type_name, \
                const char* entry_order_key_name) \
              : manager(manager), \
                stream(cv, stream_name, entry_type_name, entry_order_key_name), \
                name(stream_name), \
                key_builder(name), \
                head(::TailProduce::StreamManagerBase::template FetchHeadOrDie<T_ORDER_KEY, key_builder_type, T_STORAGE>(name, key_builder, manager->storage)) { \
                manager->streams_declared_.insert(#NAME); \
            } \
        }; \
        NAME##_type NAME = NAME##_type(this, #NAME, #ENTRY_TYPE, #ORDER_KEY_TYPE); \
        ::TailProduce::AsyncListenersFactory<NAME##_type> new_scoped_##NAME##_listener = ::TailProduce::AsyncListenersFactory<NAME##_type>(NAME)

#define TAILPRODUCE_BROADCAST_STREAM(NAME) \
        ;

#define TAILPRODUCE_PUBLISHER(NAME) \
        struct NAME##_publisher_type : ::TailProduce::Publisher<NAME##_type> { \
            typedef ::TailProduce::Publisher<NAME##_type> base; \
            explicit NAME##_publisher_type(T_THIS_FRAMEWORK_INSTANCE* manager) : base(manager->NAME) { \
                manager->stream_publishers_declared_.insert(#NAME); \
            } \
        }; \
        NAME##_publisher_type NAME##_publisher = NAME##_publisher_type(this);

#define TAILPRODUCE_STATIC_FRAMEWORK_END() \
    }
